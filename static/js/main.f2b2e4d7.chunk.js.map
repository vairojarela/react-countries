{"version":3,"sources":["components/Border.jsx","components/CountryDetails.jsx","components/SideNav.jsx","components/Welcome.jsx","components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Border","countries","country","borderCountry","find","item","cca3","to","name","common","ulStyle","listStyle","CountryDetails","props","params","match","undefined","nativeName","Object","values","native","console","log","className","region","subregion","capital","area","borders","length","style","map","index","key","currency","SideNav","maxHeight","overflowY","overflowX","flag","Welcome","NavBar","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAWeA,EATA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QACrBC,EAAgBF,EAAUG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,OAASJ,KAC3D,OACE,4BACE,kBAAC,IAAD,CAAMK,GAAE,WAAMJ,EAAcG,OAASH,EAAcK,KAAKC,U,OC2ExDC,EAAU,CAAEC,UAAW,UAEdC,EA/EQ,SAAAC,GAAU,IACvBC,EAAWD,EAAME,MAAjBD,OACFZ,EAAUD,EAAUG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,OAASQ,EAAOR,QAC5D,QAAgBU,IAAZd,EACF,OAAO,yCAKT,IAAIe,EAAaC,OAAOC,OAAOjB,EAAQM,KAAKY,QAAQ,GAAGX,OAGvD,OADAY,QAAQC,IAAIpB,GAEV,yBAAKqB,UAAU,SACb,4BAAKrB,EAAQM,KAAKC,QAClB,4BACGP,EAAQsB,OADX,MACsBtB,EAAQuB,WAE9B,2BAAOF,UAAU,SACf,gCACA,+BACE,4BACE,uCACA,4BAAKrB,EAAQwB,UAEf,4BACE,oCACA,4BACE,6BAAMxB,EAAQyB,KAAd,UAGJ,4BACE,uCACA,4BACGzB,EAAQ0B,QAAQC,OACf,wBAAIC,MAAOpB,GACRR,EAAQ0B,QAAQG,KAAI,SAAC7B,EAAS8B,GAAV,OACnB,kBAAC,EAAD,CACEC,IAAKD,EACL/B,UAAWA,EACXC,QAASA,QAKf,4EAIN,4BACE,wCACA,4BACE,8BAAOA,EAAQgC,YAGnB,4BACE,sCACA,4BACE,8BAAOjB,SCnCNkB,EAvBC,WAMd,OACE,yBAAKZ,UAAU,QAAQO,MANH,CACpBM,UAAW,OACXC,UAAW,SACXC,UAAW,WAIT,yBAAKf,UAAU,cACZtB,EAAU8B,KAAI,SAAC7B,EAAS8B,GACvB,OACE,kBAAC,IAAD,CAAMC,IAAKD,EAAOzB,GAAI,IAAML,EAAQI,MAClC,2BACGJ,EAAQqC,KADX,IACkBrC,EAAQM,KAAKC,eCX9B+B,EAJC,WACd,OAAO,yCCWMC,EAZA,WACb,OACE,yBAAKlB,UAAU,mCACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,eAAehB,GAAG,KAAlC,oB,OCoBOmC,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,IAAIC,OAAK,EAACC,UAAWL,IACjC,kBAAC,IAAD,CAAOG,KAAK,SAASC,OAAK,EAACC,UAAWjC,SCR9BkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlC,MACvB,2D,MCLNmC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f2b2e4d7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nconst Border = ({ countries, country }) => {\n  const borderCountry = countries.find(item => item.cca3 === country);\n  return (\n    <li>\n      <Link to={`/${borderCountry.cca3}`}>{borderCountry.name.common}</Link>\n    </li>\n  );\n};\n\nexport default Border;\n","import React from \"react\";\nimport Border from \"./Border\";\nimport countries from \"./countries.json\";\n\nconst CountryDetails = props => {\n  const { params } = props.match;\n  const country = countries.find(item => item.cca3 === params.cca3);\n  if (country === undefined) {\n    return <p>Loading...</p>;\n  }\n  /*   const languages = Object.values(\n    countries.find(item => item.cca3 === params.cca3)\n  ); */\n  let nativeName = Object.values(country.name.native)[0].common;\n\n  console.log(country);\n  return (\n    <div className=\"col-7\">\n      <h2>{country.name.common}</h2>\n      <h5>\n        {country.region} - {country.subregion}\n      </h5>\n      <table className=\"table\">\n        <thead></thead>\n        <tbody>\n          <tr>\n            <td>Capital</td>\n            <td>{country.capital}</td>\n          </tr>\n          <tr>\n            <td>Area</td>\n            <td>\n              <sup>{country.area} km2</sup>\n            </td>\n          </tr>\n          <tr>\n            <td>Borders</td>\n            <td>\n              {country.borders.length ? (\n                <ul style={ulStyle}>\n                  {country.borders.map((country, index) => (\n                    <Border\n                      key={index}\n                      countries={countries}\n                      country={country}\n                    />\n                  ))}\n                </ul>\n              ) : (\n                <p>This country doesn't border with any other.</p>\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Currency</td>\n            <td>\n              <span>{country.currency}</span>\n            </td>\n          </tr>\n          <tr>\n            <td>Native</td>\n            <td>\n              <span>{nativeName}</span>\n            </td>\n          </tr>\n          {/* <tr>\n            <td>Languages</td>\n            <td>\n              <ul style={ulStyle}>\n                {languages.map((language, index) => (\n                  <li key={index}>{language}</li>\n                ))}\n              </ul>\n            </td>\n          </tr> */}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst ulStyle = { listStyle: \"square\" };\n\nexport default CountryDetails;\n","import React from \"react\";\nimport countries from \"./countries.json\";\nimport { Link } from \"react-router-dom\";\n\nconst SideNav = () => {\n  const sideNavStyles = {\n    maxHeight: \"90vh\",\n    overflowY: \"scroll\",\n    overflowX: \"hidden\"\n  };\n  return (\n    <div className=\"col-5\" style={sideNavStyles}>\n      <div className=\"list-group\">\n        {countries.map((country, index) => {\n          return (\n            <Link key={index} to={`/` + country.cca3}>\n              <p>\n                {country.flag} {country.name.common}\n              </p>\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default SideNav;\n","import React from \"react\";\n\nconst Welcome = () => {\n  return <div>Welcome</div>;\n};\n\nexport default Welcome;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nconst NavBar = () => {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark mb-3\">\n      <div className=\"container\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          WikiCountries\n        </Link>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport CountryDetails from \"./components/CountryDetails\";\nimport SideNav from \"./components/SideNav\";\nimport Welcome from \"./components/Welcome\";\nimport NavBar from \"./components/NavBar\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <NavBar />\n      <div className=\"container\">\n        <div className=\"row\">\n          <SideNav />\n          <Switch>\n            <Route path=\"/\" exact component={Welcome} />\n            <Route path=\"/:cca3\" exact component={CountryDetails} />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}